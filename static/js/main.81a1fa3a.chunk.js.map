{"version":3,"sources":["../../tube-socket/src/event_listener.js","../../tube-socket/src/sync_store.js","../../tube-socket/src/actions.js","../../tube-socket/src/rand.js","../../tube-socket/src/leadership.js","../../tube-socket/src/index.js","../../tube-socket/src/tube_socket.js","Chat.js","Message.js","ConnectForm.js","App.js","index.js"],"names":["EventListener","this","listeners","type","callback","push","stack","i","l","length","splice","event","slice","call","defaultPrevented","newStore","cb","root","keys","Error","initialState","forEach","key","Proxy","get","fetchValue","set","updateProperty","deleteProperty","target","concat","value","evt","store","old_val","new_val","ELECT","rand","min","max","Math","floor","random","Leadership","conn","leader_id","connected_ids","Set","connected_count","addEventListener","onMessage","bind","payload","JSON","parse","data","action","onIdentity","onConnected","onDisconnected","onElect","client_count","add","client_id","elect","isLeader","sync","delete","values","next","waitForNomination","waitTime","setTimeout","nominate","clientID","sendJSONTo","order","Array","from","sendJSON","Object","assign","TubeSocket","room","options","jwt","buffer","onopen","onclose","onerror","onmessage","onstatechange","_room","local","debug","WSClass","WebSocket","leadership","state","_onstatechange","noconnect","connect","isConnected","close","url","_onopen","_onclose","_onerror","_onmessage","fn","dispatchEvent","message","send","_safeCall","customEvt","CustomEvent","detail","text","stringify","to","replace","readyState","OPEN","Chat","onSubmit","preventDefault","elements","reset","className","name","placeholder","Messages","messages","users","textAlign","msgColor","style","heigth","width","map","m","cls","is_system","msgCls","padding","overflowWrap","username","ConnectForm","onChange","App","useState","setConn","setMessages","setUsers","Message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81a1fa3a.chunk.js","sourcesContent":["'use strict'\n\nexport default class EventListener {\n  constructor () {\n    this.listeners = {}\n  }\n\n  addEventListener (type, callback) {\n    if (!(type in this.listeners)) {\n      this.listeners[type] = []\n    }\n    this.listeners[type].push(callback)\n  }\n\n  removeEventListener (type, callback) {\n    if (!(type in this.listeners)) { return }\n    var stack = this.listeners[type]\n    for (var i = 0, l = stack.length; i < l; i++) {\n      if (stack[i] === callback) {\n        stack.splice(i, 1)\n        return\n      }\n    }\n  }\n\n  dispatchEvent (event) {\n    if (!(event.type in this.listeners)) { return true }\n    var stack = this.listeners[event.type].slice()\n    for (var i = 0, l = stack.length; i < l; i++) {\n      if (stack[i].call(this, event) === false || event.defaultPrevented) {\n        return false\n      }\n    }\n    return true\n  }\n}\n","'use strict'\n\nexport const newStore = (cb, root = {}, keys = []) => {\n  if (typeof root !== 'object') {\n    throw new Error('can only be an object')\n  }\n  let initialState = root\n  keys.forEach((key) => {\n    initialState = initialState[key]\n  })\n  return new Proxy(initialState, {\n    get: fetchValue(cb, root, keys),\n    set: updateProperty(cb, root, keys),\n    deleteProperty: updateProperty(cb, root, keys)\n  })\n}\n\nconst fetchValue = (cb, root, keys) => {\n  return (target, key) => {\n    if (typeof target[key] === 'object' && target[key] !== null) {\n      return newStore(cb, root, keys.slice(0).concat(key))\n    } else {\n      return target[key]\n    }\n  }\n}\n\nconst updateProperty = (cb, root, keys) => {\n  return (target, key, value) => {\n    if (cb && typeof cb === 'function') {\n      const evt = {\n        store: root,\n        keys: keys.slice(0).concat(key),\n        old_val: target[key],\n        new_val: value\n      }\n      if (!cb(evt)) { return true }\n    }\n    if (value == null) {\n      delete target[key]\n    } else {\n      target[key] = value\n    }\n    return true\n  }\n}\n","'use strict'\n\nexport const IDENTITY = 'identity'\nexport const USER_CONNECTED = 'connected'\nexport const USER_DISCONNECTED = 'disconnected'\nexport const ELECT = 'ts_leadership_elect'\nexport const CHANGE = 'ts_change'\n","'use strict'\n\nconst rand = (min, max) => Math.floor(Math.random() * (max - min)) + min\n\nexport default rand\n","'use strict'\n\nimport { IDENTITY, USER_CONNECTED, USER_DISCONNECTED, ELECT } from './actions'\nimport rand from './rand'\n\nexport default class Leadership {\n  constructor (conn) {\n    this.leader_id = null // client id of the current leader\n    this.connected_ids = new Set([]) // client ids in order that they connected\n    this.connected_count = 0 // count of clients from the server\n    this.conn = conn\n    conn.addEventListener('message', this.onMessage.bind(this))\n  }\n\n  get isLeader () {\n    return this.leader_id !== null &&\n      this.conn.client_id !== null &&\n      this.leader_id === this.conn.client_id\n  }\n\n  onMessage (evt) {\n    const payload = JSON.parse(evt.data)\n    switch (payload.action) {\n      case IDENTITY: this.onIdentity(payload); break\n      case USER_CONNECTED: this.onConnected(payload); break\n      case USER_DISCONNECTED: this.onDisconnected(payload); break\n      case ELECT: this.onElect(payload); break\n    }\n  }\n\n  onIdentity (payload) {\n    this.connected_count = payload.client_count\n    this.connected_ids.add(payload.client_id)\n    if (payload.client_count === 1) {\n      this.elect()\n    }\n  }\n\n  onConnected (payload) {\n    this.connected_count = payload.client_count\n    this.connected_ids.add(payload.client_id)\n    if (this.isLeader && this.conn.client_id !== payload.client_id) {\n      this.sync(payload.client_id)\n    }\n  }\n\n  onDisconnected (payload) {\n    this.connected_count = payload.client_count\n    this.connected_ids.delete(payload.client_id)\n    if (payload.client_id === this.leader_id) {\n      this.leader_id = null\n      if (this.connected_ids.values().next().value === this.conn.client_id) {\n        // elect self if we are next in line\n        this.elect()\n      } else {\n        // take control if the leader is weak! Random so that all clients don't\n        // do it at the same time.\n        this.waitForNomination(rand(3000, 5000))\n      }\n    }\n  }\n\n  waitForNomination (waitTime) {\n    setTimeout(this.nominate.bind(this), waitTime)\n  }\n\n  nominate () {\n    if (this.leader_id === null) {\n      this.elect()\n    }\n  }\n\n  sync (clientID) {\n    this.conn.sendJSONTo(clientID, {\n      action: ELECT,\n      order: Array.from(this.connected_ids),\n      store: this.conn.data\n    })\n  }\n\n  elect () {\n    this.leader_id = this.conn.client_id\n    this.conn.sendJSON({\n      action: ELECT,\n      order: Array.from(this.connected_ids),\n      store: this.conn.data\n    })\n  }\n\n  onElect (payload) {\n    if (this.leader_id !== null) { return }\n    this.leader_id = payload.client_id\n    this.connected_ids = new Set(payload.order)\n    this.conn.data = Object.assign(this.conn.data, payload.store)\n  }\n}\n","'use strict'\n\nimport TubeSocket from './tube_socket'\n\nexport default TubeSocket\n","'use strict'\n\nimport EventListener from './event_listener'\nimport { newStore } from './sync_store'\nimport Leadership from './leadership'\nimport { IDENTITY, CHANGE } from './actions'\n\nexport default class TubeSocket extends EventListener {\n  constructor (room, options = {}) {\n    super()\n    this.client_id = null // our own unique ID\n    this.jwt = null // our own jwt for reconnection\n    this.buffer = []\n\n    this.onopen = null\n    this.onclose = null\n    this.onerror = null\n    this.onmessage = null\n    this.onmessage = null\n    this.onstatechange = null\n\n    this._room = room\n    this.local = options.debug\n    this.WSClass = options.WSClass || WebSocket\n\n    this.leadership = new Leadership(this)\n    this.data = options.initialState\n    this.state = newStore(this._onstatechange, options.initialState)\n\n    if (!options.noconnect) { this.connect() }\n  }\n\n  get url () {\n    const host = this.local\n      ? `ws://localhost:8080/${this.room}`\n      : `wss://tubes.dev/${this.room}`\n    const query = this.jwt ? `?jwt=${this.jwt}` : ''\n    return host + query\n  }\n\n  get room () {\n    return this._room.replace('wss://tubes.dev/', '')\n  }\n\n  get isConnected () {\n    return this.conn && this.conn.readyState === WebSocket.OPEN\n  }\n\n  get isLeader () {\n    return this.leadership.isLeader\n  }\n\n  get clientCount () {\n    return this.leadership.connected_count\n  }\n\n  connect () {\n    if (this.isConnected) {\n      this.conn.close()\n    }\n    this.conn = new this.WSClass(this.url)\n    this.conn.onopen = this._onopen.bind(this)\n    this.conn.onclose = this._onclose.bind(this)\n    this.conn.onerror = this._onerror.bind(this)\n    this.conn.onmessage = this._onmessage.bind(this)\n  }\n\n  _safeCall (fn, evt) {\n    return this.dispatchEvent(evt) ||\n      (typeof fn === 'function' && fn(evt))\n  }\n\n  _onopen (evt) {\n    this.buffer.forEach((message) => {\n      this.send(message)\n    })\n    this.buffer = []\n    this._safeCall(this.onopen, evt)\n  }\n\n  _onclose (evt) {\n    setTimeout(this.connect.bind(this), 5000)\n    this._safeCall(this.onclose, evt)\n  }\n\n  _onmessage (evt) {\n    const payload = JSON.parse(evt.data)\n    switch (payload.action) {\n      case IDENTITY:\n        this.client_id = payload.client_id\n        this.jwt = payload.jwt\n        break\n    }\n    this._safeCall(this.onmessage, evt)\n  }\n\n  _onerror (evt) {\n    this._safeCall(this.onerror, evt)\n  }\n\n  _onstatechange (evt) {\n    const customEvt = new CustomEvent(CHANGE, { detail: evt })\n    return this._safeCall(this.onstatechange, customEvt)\n  }\n\n  send (text) {\n    if (!this.isConnected) {\n      this.buffer.push(text)\n      return\n    }\n    this.conn.send(text)\n  }\n\n  sendJSON (data) {\n    this.send(JSON.stringify(data))\n  }\n\n  sendJSONTo (clientID, data) {\n    if (clientID === this.client_id) { return }\n    if (typeof data !== 'object' || data == null) {\n      data = { payload: data }\n    }\n    data.to = clientID\n    this.sendJSON(data)\n  }\n\n  sendJSONToLeader (data) {\n    this.sendJSONTo(this.leadership.leader_id, data)\n  }\n}\n","import React from 'react'\n\nfunction Chat ({ conn }) {\n  const sendMessage = (evt) => {\n    evt.preventDefault()\n    const text = evt.target.elements.message.value\n    conn.sendJSON({ action: 'chat_message', text })\n    evt.target.reset()\n  }\n\n  return (\n    <form onSubmit={sendMessage}>\n      <div className=\"field has-addons\">\n        <div className=\"control is-expanded\">\n          <input className=\"input\" name=\"message\" type=\"text\" placeholder=\"Type your message\" />\n        </div>\n        <div className=\"control\">\n          <button className=\"button is-info\">\n            Send\n          </button>\n        </div>\n      </div>\n    </form>\n  )\n}\n\nexport default Chat\n","import React from 'react'\n\nfunction Messages ({ client_id, messages, users }) {\n\n  const textAlign = {\n    'me': 'right',\n    'system': 'center',\n    'them': 'left',\n  }\n\n  const msgColor = {\n    'me': 'is-info',\n    'system': '',\n    'them': 'is-success',\n  }\n\n  const msgCls = (m) => {\n    if (m.is_system) {\n      return 'system'\n    } else if (m.client_id === client_id) {\n      return 'me'\n    }\n    return 'them'\n  }\n\n  const username = (m) => {\n    return `${users[m.client_id]?.username || 'anon'} : `\n  }\n\n  return (\n    <div style={{ heigth: '100%', width: '100%' }}>\n      {messages.map((m, i) => {\n        const cls = msgCls(m)\n        return (<p key={i} style={{ padding: '.25em', textAlign: textAlign[cls], overflowWrap: 'normal' }}>\n          <span className={`tag is-medium ${msgColor[cls]}`}>\n            {username(m)}{m.text}\n          </span>\n        </p>)\n      })}\n    </div>\n  )\n}\n\nexport default Messages\n","import React from 'react'\n\nfunction ConnectForm ({ connect }) {\n  const startConnect = (evt) => {\n    evt.preventDefault()\n    const url = evt.target.elements.url.value\n    const username = evt.target.elements.username.value\n    connect(url, username)\n  }\n\n  return (<form onSubmit={startConnect}>\n    <div className=\"field\">\n      <label className=\"label\">Room</label>\n      <div className=\"control\">\n        <input\n          className=\"input\"\n          name=\"url\"\n          type=\"text\"\n          placeholder=\"wss://tubes.dev/F3A00E\"\n          value=\"wss://tubes.dev/F3A00E\"\n          onChange={ () => true }\n        />\n      </div>\n    </div>\n\n    <div className=\"field\">\n      <label className=\"label\">Username</label>\n      <div className=\"control\">\n        <input\n          className=\"input\"\n          name=\"username\"\n          type=\"text\"\n          placeholder=\"username\"\n        />\n      </div>\n    </div>\n\n    <div className=\"field\">\n      <div className=\"control\">\n        <button className=\"button is-link\">Connect</button>\n      </div>\n    </div>\n  </form>)\n}\n\nexport default ConnectForm\n","import React, { useState } from 'react'\nimport TubeSocket from 'tube-socket'\nimport Chat from './Chat'\nimport Messages from './Message'\nimport ConnectForm from './ConnectForm'\n\nfunction App () {\n  const [conn, setConn] = useState(null)\n  const [messages, setMessages] = useState([])\n  const [users, setUsers] = useState({})\n\n  const connect = (room, username) => {\n    const conn = new TubeSocket(room)\n    conn.addEventListener('open', (evt) => {\n      conn.sendJSON({ action: 'username', username })\n    })\n    conn.addEventListener('message', (evt) => {\n      const payload = JSON.parse(evt.data)\n      switch (payload.action) {\n        case 'connected':\n          conn.sendJSONTo(payload.client_id, { action: 'update_username', username })\n          break\n        case 'disconnected':\n          setMessages((messages) => [...messages, { is_system: true, client_id: payload.client_id, text: 'disconnected' }])\n          break\n        case 'chat_message':\n          setMessages((messages) => [...messages, { client_id: payload.client_id, text: payload.text }])\n          break\n        case 'username':\n          setMessages((messages) => [...messages, { is_system: true, client_id: payload.client_id, text: 'connected' }])\n          setUsers((users) => ({ ...users, [payload.client_id]: { username: payload.username } }))\n          break\n        case 'update_username':\n          setUsers((users) => ({ ...users, [payload.client_id]: { username: payload.username } }))\n          break\n        default:\n      }\n    })\n    setConn(conn)\n  }\n\n  return (\n    <section className=\"hero is-fullheight\">\n      <div className=\"hero-head\">\n        <header className=\"hero is-primary is-bold\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <p className=\"title\">Messages through the tubes</p>\n            </div>\n          </div>\n        </header>\n      </div>\n      <div className=\"hero-body\">\n        { conn\n          ? <Messages client_id={conn.client_id} messages={messages} users={users} />\n          : <ConnectForm connect={connect} /> }\n      </div>\n      <div className=\"hero-foot\">\n        <footer className=\"section is-small\">\n          { conn ? <Chat conn={conn} /> : '' }\n        </footer>\n      </div>\n    </section>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'bulma/css/bulma.css'\n\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode><App /></React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}